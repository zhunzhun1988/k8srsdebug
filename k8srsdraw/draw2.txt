package main

import (
	"fmt"
	"image"
	"image/color"
	"image/png"
	"os"
	"time"

	"github.com/BurntSushi/xgbutil"
	"github.com/BurntSushi/xgbutil/xevent"
	"github.com/BurntSushi/xgbutil/xgraphics"
	"github.com/BurntSushi/xgbutil/xwindow"
	"github.com/golang/freetype/raster"
	"golang.org/x/image/math/fixed"
)

type Putpixel func(x, y int)

func abs(x int) int {
	if x >= 0 {
		return x
	}
	return -x
}

// Bresenham's algorithm, http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
// TODO: handle int overflow etc.
func drawline(x0, y0, x1, y1 int, brush Putpixel) {
	dx := abs(x1 - x0)
	dy := abs(y1 - y0)
	sx, sy := 10, 10
	if x0 >= x1 {
		sx = -10
	}
	if y0 >= y1 {
		sy = -10
	}
	err := dx - dy

	for {
		brush(x0, y0)
		fmt.Printf("x=%d, y=%d\n", x0, y0)
		if x0 > x1 && y0 > y1 {
			return
		}
		e2 := err * 2
		if e2 > -dy {
			err -= dy
			x0 += sx
		}
		if e2 < dx {
			err += dx
			y0 += sy
		}
	}
}
func main() {

	// width and height of the window to be created
	w, h := 800, 600

	// xu communicates with X server
	xu, err := xgbutil.NewConn()
	if err != nil {
		fmt.Println(err)
		return
	}

	// just create a id for the window
	xwin, err := xwindow.Generate(xu)
	if err != nil {
		fmt.Println(err)
		return
	}
	// now, create the window
	err = xwin.CreateChecked(
		xu.RootWin(), // parent window
		0, 0, w, h,   // window size
		0) // related to event, not considered here
	if err != nil {
		fmt.Println(err)
		return
	}
	// now we can see the window on the screen
	xwin.Map()

	// 'rstr' calculates the data needed to draw
	// 'painter' draw with the data on 'canvas'
	canvas := image.NewRGBA(image.Rect(0, 0, w, h))
	rstr := raster.NewRasterizer(w, h)
	painter := raster.NewRGBAPainter(canvas)
	painter.SetColor(color.RGBA{0xff, 0x00, 0x00, 0xff})

	drawline(5, 5, w-8, h-10, func(x, y int) {
		canvas.Set(x, y, color.RGBA{uint8(x), uint8(y), 0, 255})
	})
	// specify the start point (100, 100)
	// why shift by 8?
	// raster.Point has 2 memembers X and Y, they are both of type raster.Fix32
	// raster.Fix32 is fixed point number, the high 24 bits is the integral part
	// for example, a raster.Fix32 number 1 in fact is 1/256

	for i := 0; i < 100; i += 10 {
		a := fixed.Point26_6{fixed.Int26_6((100 + i*10) << 6), fixed.Int26_6((100 + i*10) << 6)}
		rstr.Start(a)

		// draw a straight line from the start point
		b := fixed.Point26_6{fixed.Int26_6((200 + i*10) << 6), fixed.Int26_6((100 + i*10) << 6)}
		rstr.Add1(b)

		// draw a bezier curve, points b, c, d are the control points
		c := fixed.Point26_6{fixed.Int26_6((200 + i*10) << 6), fixed.Int26_6((200 + i*10) << 6)}
		d := fixed.Point26_6{fixed.Int26_6((100 + i*10) << 6), fixed.Int26_6((200 + i*10) << 6)}
		rstr.Add2(c, d)

		rstr.Add1(a)

		// now, draw the shape on 'canvas'
		rstr.Rasterize(painter)

		// 'canvas' is of type *image.RGBA,
		// but the window need xgraphics.Image to show, so we convert it
		ximg := xgraphics.NewConvert(xu, canvas)

		// I want 'ximg' to show on 'xwin'
		ximg.XSurfaceSet(xwin.Id)
		// now show it
		ximg.XDraw()
		ximg.XPaint(xwin.Id)
		time.Sleep(time.Second * 4)
	}
	// save the image to png
	fd, err := os.Create("blog.png")
	if err != nil {
		fmt.Println(err)
		return
	}
	err = png.Encode(fd, canvas)
	if err != nil {
		fmt.Println(err)
	}

	// listen on the events such as keypress, mousepress etc.
	xevent.Main(xu)

}
